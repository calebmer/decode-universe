import { Set, OrderedSet } from 'immutable';
import { Observable } from 'rxjs';
import { PeerStreams } from './PeerStreams';

/**
 * The configuration we use when creating `RTCPeerConnection` instances.
 *
 * There are some free STUN servers available to us. Letâ€™s use them!
 */
const rtcConfig = {
  iceServers: [
    { urls: 'stun:stun.l.google.com:19302' },
    { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },
  ],
};

export class Peer {
  public readonly connection: RTCPeerConnection;

  public readonly remoteStreams: Observable<OrderedSet<MediaStream>>;

  private disposables: Array<{ dispose: () => void }> = [];

  constructor({
    localStreams,
  }: {
    localStreams: Observable<Set<MediaStream>>,
  }) {
    this.connection = new RTCPeerConnection(rtcConfig);

    // Make sure to have a lazy observable ready for all of the remote streams
    // we expect to be generated by this peer.
    this.remoteStreams = PeerStreams.watchRemoteStreams(this.connection);

    // Maintain all of the local streams in accordance to the observable we were
    // given.
    this.disposables.push(PeerStreams.maintainLocalStreams(
      this.connection,
      localStreams,
    ));
  }

  public close(): void {
    // Disposes all of our disposables.
    this.disposables.forEach(disposable => disposable.dispose());
    this.disposables = [];
    // If the connection is not already closed then close it.
    if (this.connection.signalingState !== 'closed') {
      this.connection.close();
    }
  }
}
